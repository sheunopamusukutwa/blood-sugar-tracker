"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.x.
Updated for DRF filtering/ordering and env-based config.
"""

from pathlib import Path
import os

# ------------------------------------------------------------
# Paths
# ------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------
# Core security & debug
# ------------------------------------------------------------
# Use env vars in future: export DJANGO_SECRET_KEY="..."
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-lzu%4q@0ih3(&_jl0)m=linww3-34f-pjcw$u@p8th15cs7p(9"  # fallback for local dev
)

# DJANGO_DEBUG should be "True" or "False"
DEBUG = os.getenv("DJANGO_DEBUG", "True").strip().lower() == "true"

# When DEBUG is True, allow everything to avoid local hassles.
# In prod, set: export ALLOWED_HOSTS="example.com,api.example.com"
# Hosts
# Hosts
if DEBUG:
    ALLOWED_HOSTS = ["*"]  # allow everything in local dev
else:
    ALLOWED_HOSTS = [
        h.strip() for h in os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",") if h.strip()
    ]

CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1",
    "http://localhost",
]

# ------------------------------------------------------------
# Applications
# ------------------------------------------------------------
INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",
    "rest_framework.authtoken",
    "django_filters",  # <-- enables ?date_from/&date_to/&status and OrderingFilter

    # Local apps
    "tracker",
]

# ------------------------------------------------------------
# Django REST Framework
# ------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # Keep your current token auth (you can swap to JWT later if you want)
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",  # filtering
        "rest_framework.filters.OrderingFilter",              # ?ordering=timestamp|-timestamp|value|...
        # Optional: enable SearchFilter if you add search_fields on your views
        # "rest_framework.filters.SearchFilter",
    ],
    # Pagination (works nicely with list endpoints)
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": int(os.getenv("PAGE_SIZE", "20")),
}

# ------------------------------------------------------------
# Middleware / Templates / WSGI
# ------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # add BASE_DIR / "templates" if needed
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# ------------------------------------------------------------
# Database
# ------------------------------------------------------------
# Local default: SQLite. For Postgres later, set DATABASE_URL or configure here.
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# ------------------------------------------------------------
# Password validation
# ------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("TIME_ZONE", "UTC")
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------
# Static files
# ------------------------------------------------------------
STATIC_URL = "static/"
# For collectstatic in deployment (optional for local dev)
STATIC_ROOT = BASE_DIR / "staticfiles"

# ------------------------------------------------------------
# Default primary key
# ------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
